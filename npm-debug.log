0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.9.6
3 info using node@v6.9.1
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/nc/work/fuse-box/fuse-box',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/nc/.npm/fuse-box/1.2.91/package.tgz not in flight; packing
9 verbose correctMkdir /Users/nc/.npm correctMkdir not in flight; initializing
10 info lifecycle fuse-box@1.2.91~prepublish: fuse-box@1.2.91
11 silly lifecycle fuse-box@1.2.91~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/nc/.npm/fuse-box/1.2.91/package.tgz',
12 verbose tar pack   '/Users/nc/work/fuse-box/fuse-box' ]
13 verbose tarball /Users/nc/.npm/fuse-box/1.2.91/package.tgz
14 verbose folder /Users/nc/work/fuse-box/fuse-box
15 verbose addLocalTarball adding from inside cache /Users/nc/.npm/fuse-box/1.2.91/package.tgz
16 verbose correctMkdir /Users/nc/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd fuse-box@1.2.91
18 verbose afterAdd /Users/nc/.npm/fuse-box/1.2.91/package/package.json not in flight; writing
19 verbose correctMkdir /Users/nc/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/nc/.npm/fuse-box/1.2.91/package/package.json written
21 silly publish { name: 'fuse-box',
21 silly publish   version: '1.2.91',
21 silly publish   description: 'Fuse-Box a bundler just does it right',
21 silly publish   typings: './dist/typings/index.d.ts',
21 silly publish   main: 'dist/commonjs/index.js',
21 silly publish   directories: { test: 'test' },
21 silly publish   scripts: { test: 'TRAVIS=true ./node_modules/mocha/bin/mocha' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/fuse-box/fuse-box.git' },
21 silly publish   author: '',
21 silly publish   license: 'ISC',
21 silly publish   bugs: { url: 'https://github.com/fuse-box/fuse-box/issues' },
21 silly publish   homepage: 'https://github.com/fuse-box/fuse-box#readme',
21 silly publish   devDependencies:
21 silly publish    { '@types/node': '^6.0.41',
21 silly publish      cheerio: '0.22.0',
21 silly publish      'fuse-box-test-using-old-version': '^1.0.0',
21 silly publish      'fuse-box-testcase1': '^1.0.0',
21 silly publish      'fuse-box-testcase3': '^1.0.3',
21 silly publish      gulp: '^3.9.1',
21 silly publish      'gulp-bump': '^2.4.0',
21 silly publish      'gulp-concat': '^2.6.0',
21 silly publish      'gulp-rename': '^1.2.2',
21 silly publish      'gulp-replace': '^0.5.4',
21 silly publish      'gulp-sourcemaps': '^1.6.0',
21 silly publish      'gulp-typescript': '^3.0.1',
21 silly publish      'gulp-uglify': '^2.0.0',
21 silly publish      'gulp-wrap': '^0.13.0',
21 silly publish      mocha: '^3.1.0',
21 silly publish      'reflect-metadata': '^0.1.8',
21 silly publish      rollup: '^0.36.3',
21 silly publish      'run-sequence': '^1.2.2',
21 silly publish      should: '^11.1.0',
21 silly publish      typescript: '^2.1.1',
21 silly publish      watch: '^1.0.1',
21 silly publish      'wires-reactive': '^1.1.1' },
21 silly publish   dependencies:
21 silly publish    { acorn: '^4.0.3',
21 silly publish      'acorn-es7': '^0.1.0',
21 silly publish      'acorn-jsx': '^3.0.1',
21 silly publish      ansi: '^0.3.1',
21 silly publish      'app-root-path': '^2.0.1',
21 silly publish      astq: '^1.8.0',
21 silly publish      buffer: '^5.0.0',
21 silly publish      'concat-with-sourcemaps': '^1.0.4',
21 silly publish      glob: '^7.1.1',
21 silly publish      mkdirp: '^0.5.1',
21 silly publish      'pretty-time': '^0.2.0',
21 silly publish      prettysize: '0.0.3',
21 silly publish      'realm-utils': '^1.0.6',
21 silly publish      request: '^2.79.0' },
21 silly publish   readme: '[![Build Status](https://travis-ci.org/fuse-box/fuse-box.svg?branch=master)](https://travis-ci.org/fuse-box/fuse-box)\n  \n# FuseBox\n> The library is under heavy development. We are getting there.\n\n# Introduction\n\nFusBox is a bundler/module loader that combines the power of webpack and JSPM. It is blazing fast (it takes 50-100ms to re-bundle) which makes it extremely convenient to develop.\n\nSay no to painful "get started", say no to huge configs. Fuse it all!\n\n[angular2-example](https://github.com/fuse-box/angular2-example) 50ms to build!\n\n[react-example](https://github.com/fuse-box/react-example) 50ms to build\n\n## Why fusebox?\n\n### Bundle anything without an extra effort\nYou have an npm library in mind? You can bundle it without any extra configuration. babel-core with all plugins? No problem, fusebox takes care of everything you need.\n\nAll node modules (at least the most critical ones) will be bundled for browser (Buffer, path e.t.c) So you don\'t need to stress about whether you bundle will work in the browser. IT WILL.\n\n### It is blazing fast\n\nFusebox is super fast. 50ms for a regular project, 100ms for a big project to re-bundle. It applies aggressive but responsible module caching, which makes it fly.\n\nCheck this benchmark:\n\n1200 files to require once\n\n|         |            |\n| ------------- |:-------------:| \n| FuseBox      | 0.326s |\n| Webpack      | 1.376s |\n\n\n1000 files to require / 10 times\n\n|         |            |\n| ------------- |:-------------:| \n| FuseBox      | 2.796s |\n| Webpack      | 13.837s |\n\n\n\n1000\nWebpack\nFuseBox\n\n### Built-in typescript support.\n\nFuseBox is written in typescript, so I could not just proceed without a seamless typescript intergration. In fact, you don\'t need to configure anything! Just point it to a typescript file, and FuseBox will do the rest.\n\n```js\nfuseBox.bundle(">index.ts");\n```\n\n### Arithmetic instructions\n\nWith arithmetic instructions you can explicitly define which files go to the bundle, which files skip external dependencies.\n\nFor example.\n```js\nfuseBox.bundle(">index.ts [lib/**/*.ts]");\n```\n\nIn this case, you will get everything that is required in the index, as well as everything that lies under lib/ folder with one condition - any external libraries will be ignored. \n\n`> index.js [**/*.js]` - Bundle everything without dependencies, and execute index.js\n\n`[**/*.js]` - Bundle everything without dependencies\n\n`**/*.js` - Bundle everything with dependencies\n\n`**/*.js -path` - Bundle everything with dependencies except for path\n\n \n### Extensive plugins\n\nHave an idea in mind? Just develop a plugin, it\'s extremely easy to make one. Besides, we have [a few plugins](built-in-plugins), that will help you get started. Want to develop one? Read-up [here](#plugin-api)\n\n## How FuseBox works?!\n\nThe idea of FuseBox was born, when started struggling with webpack. It is slow, and it did not deliver required functionality. On another hand, jspm did what I wanted, but still it was not something I would go for. So I decided to combine both and create my own version that has a power of both bundlers combined. \n\n### Static analysis (acorn)\nBehind the scenes, fusebox uses acorn to make static analisys on your code, extracting require statements and es6 imports. So, as long as it is a valid javascript es5 or es6, you will get your code bundled with no plugins required. \n\n### Aggressive npm caching\nFuseBox uses agressive caching for your modules. It knows when a file is modified. It knows exactly which version of npm lib you are using, as well as explicit requires like `require(\'lodash/each\')`\n\n### Nodejs ecosystem and lifecycle in the browser\nFuseBox appends a very tiny API footer that makes magic happen. The library does not modify your source code, it creates 100% compatible [commonjs wrapper](https://nodejs.org/api/modules.html#modules_the_module_wrapper)\n\n```js\n(function (exports, require, module, __filename, __dirname) {\n// Your module code actually lives in here\n});\n```\n\nIt behaves exactly the same in browser and on server, including circular dependencies resolution. Surely, it works in node as well.\n\n\n# Fuse it all\n\n## Anything\n\nThe concept of FuseBox is simple. Bundle anything with minimum configuration. You can point your files to a typescript file or to a javascript file. It will understand `es6` import statements as well. You need, however, use [BabelPlugin](#babel-plugin) to transpile it.\n\n\n## Typescript\n\nTypescript does not require any external plugin or configuration. Make sure you have typescript compiler installed\n\n```bash\nnpm install typescript --save-dev\n```\n\nNow let\'s define a simple configuration\n\n```js\nFuseBox.init({\n    homeDir: "src/",\n    sourceMap: {\n         bundleReference: "./sourcemaps.js.map",\n         outFile: "sourcemaps.js.map",\n    },\n    outFile: "./out.js"\n}).bundle(">index.ts");\n```\n\nFuseBox automatically switches to a typescript mode and compiles your files. Place `tsconfig.json` in your `homeDir`. It will be loaded automatically. For your own convenience add [Typescript helpers](#typescript-helpers) plugin.\n\n## Export from bundle\n\nYou can easily export any library from your bundle to window/module.exports accordingly.\nSimply add this property:\n\n```js\nglobals: { default: "myLib", "wires-reactive": "Reactive" }\n```\n\nWhereas key is the name of a package and value is an alias that groups exports.\n"default" is your current project. Please, note, that in order to expose your default package, a bundle must have an entry point.\n\nFull example:\n\n```js\nFuseBox.init({\n    homeDir: "src/",\n    globals: { default: "myLib"},\n    outFile: "./out.js"\n}).bundle(">index.js");\n```\n\n## Point to the root\nYou can use `~` symbol to point to your project\'s path in order to solve `../../../../../utils` mess.\n\n```js\n// es5\nrequire("~/lib/utils")\n// es6\nimport * as utils from "~/lib/utils";\n```\n\n\n\n# Loader API\n\nFuseBox bundle works in both environments. Essentially, it does not matter where you run. FuseBox will persist itself in browser window, or nodejs globals.\n\nEvery bundle contains a 3k footer with FuseBox API, It is less than 3KB minified (1,4KB gzipped).  \n\n\n## Import\nImport is 100% compatible with commonjs specification. You can require folders, skip file extensions (fusebox will guess it).\n```js\nFuseBox.import("./foo/bar");\n```\nRequre external packages will work  as well\n\n```js\nFuseBox.import("fs");\n```\n\nPlease, not, that some libraries like "fs" are faked on browser. Meaning that it won\'t spit an error, but won\'t work as expected on server for known reasons.\nNodejs environment, however, will get authentic "fs" module. (Concerns http, net, tty e.t.c )\n\n## Exists\n\nYou check wether a module (file) exists in scope.\n```js\nFuseBox.exists("./index")\n```\n\n## Event binding\n\nIt is possible to intercept require statements. Use "on" method.\n\n```\nFuseBox.on("before-import", (exports, require, module, __filename, __dirname, pkg) => {                \n});\n\nFuseBox.on("after-import", (exports, require, module, __filename, __dirname, pkg) => {                \n});\n```\n2 events are available at the moment "before-import" and "after-import", Provides commonjs environment (+ package name) in the callback. "require" function is "homie" and respects file location.\n\n\n## Dynamic\n\nLike SystemJS FuseBox provides a hacky way of creating a dynamic module from a string. After it has been initialized it shared 100% the same environment and behaves accordingly.\n\n```\nFuseBox.dynamic("stuff/boo.js", "module.exports = {hello : \'dynamic\'}; require(\'./foo\')")\n```\nA bundle can reference "stuff/boo.js" once a dynamic module was initialized.\n\n## FuseBox events\n\nIt is possible to intercept require statements. You can catch "before-import" and "after-import" events like so:\n\n```\nFuseBox.on("before-import", (exports, require, module, __filename, __dirname, pkg) => {                \n});\n\nFuseBox.on("after-import", (exports, require, module, __filename, __dirname, pkg) => {                \n});\n```\n\nIt is not recommended, however, if you want to play god, you can use that functionality.\n\n\n\n# Built-in plugins\n\nFusebox contains premade plugins, that should help you to get started. \n\n## CSS Plugin\n\nIt\'s very to start working css files You have 2 options, you either bundle the contents or serve files. A decision can be made at build time.\n\nFor example:\n```\nplugins: [\n    fsbx.CSSPlugin({\n        minify: true\n    })\n]\n```\n\nIn this case, all css files will be bundled.\n\nBut if you define "serve" option with a callback, all files will be filtered through it. A callback is expected to return a string with a browser path. If you return "undefined" or *NOT* a string, that file will be bundled as if no option was specified.\n\nAll css files will be served by server.\n```\nplugins: [\n    fsbx.CSSPlugin({\n        minify: true,\n        serve: path => `./${path}`\n    })\n]\n```\n\nAll files will be served except for "styles.css" (contents will be included in the bundle)\n```\nplugins: [\n    fsbx.CSSPlugin({\n        minify: true,\n        serve: path => path === "styles.css` ? 0 : ./${path}`\n    })\n]\n```\n\n## HTML Plugin\n\nAdd HTMLPlugin like so:\n```\nplugins: [\n  fsbx.HTMLPlugin({ useDefault: false })\n]\n```\n\nToggle `useDefault` to make html files export strings as `default` property.\nFor example with `useDefault: true` you will be able to import HTML files like so :\n\n```\nimport tpl from "~/views/file.html"\n```\n\n## Babel plugin\n\nYou can use babel plugin to transpile your code. \nMake sure you have `babel-core` installed\n\n```bash\nnpm install babel-core babel-preset-es2015 babel-plugin-transform-react-jsx\n```\nFor example. to transpile JSX, you can use this configuration. \n```\n plugins: [\n    fsbx.BabelPlugin({\n        test: /\\.jsx$/,\n        config: {\n            sourceMaps: true,\n            presets: ["es2015"],\n            plugins: [\n                ["transform-react-jsx"]\n            ]\n        }\n    })\n]\n```\nNote, that if you want to have sourcemaps in place, set `sourceMaps` to true. Read sourcemaps section for better understanding how sourcemaps are defined.\n\n## Typescript helpers\n\nA very handy plugin, adds required typescript functions to the bundle. Please, note, that it adds only the ones that are actually used. So you won\'t be seeing an unnecessary code.\n\nPlease, check this [list](https://github.com/fuse-box/fuse-box/tree/master/assets/libs/fuse-typescript-helpers)\n\nAvailable helpers:\n\nName | Description\n------------ | -------------\n__assign | Generic typescript helper\n__awaiter | Generic typescript helper\n__decorator | Generic typescript helper + additional fusebox meta data patched\n__extends | Generic typescript helper\n__generator | Generic typescript helper\n__param | Generic typescript helper\n\nIf you spot an error or a missing helper, please, submit an issue, or a pull request. If you feel impatient enough, you can always create your own plugin, based on this class [code](https://github.com/fuse-box/fuse-box/blob/master/src/plugins/TypeScriptHelpers.ts)\n\n### Using the plugin\n\nSimple add TypeScriptHelpers to your plugin list. No further configuration required. FuseBox will take care of everything else. To avoid unnecessary AST (which is heavy) this plugin does a simple RegExp, and tests for declarations. It is absolutely safe, and your code is not modified in any way. \n\n```\nconst fsbx = require("fuse-box");\nlet fuseBox = fsbx.FuseBox.init({\n    homeDir: "test/fixtures/cases/ts",\n    outFile: "./out.js",\n    plugins: [fsbx.TypeScriptHelpers()]\n});\n\n```\n### Extended metadata properties \n\nYou can have access to the entire environment of a file, using reflect-metadata. Make sure you have it installed first\n\n```\nnpm install reflect-metadata\n```\n\nThan, include it in your entry point\n\n```\nimport "reflect-metadata";\n```\n\nNow, you can access "commonjs" variables via fusebox metadata property\n\n```\nexport function testDecorator() {\n    return function (target, key: string, descriptor: PropertyDescriptor) {\n        Reflect.getMetadata("fusebox:__filename", target, key);\n        Reflect.getMetadata("fusebox:__dirname", target, key);\n        Reflect.getMetadata("fusebox:require", target, key); // Local "require" function\n        Reflect.getMetadata("fusebox:module", target, key);\n        Reflect.getMetadata("fusebox:exports", target, key);\n    }\n}\n```\n\n# Sourcemaps\n\nSourcemaps in FuseBox are enabled by adding this property to a fusebox init configuration\n\n```js\nsourceMap: {\n  bundleReference: "sourcemaps.js.map",\n  outFile: "sourcemaps.js.map",\n}\n```\n`bundleReference` speaks for itself. This line will be added to the bundle. For example `//# sourceMappingURL=./sourcemaps.js.map`. If your client is not able to read them, make sure that the path is reachable. \n\nSourcemaps currently work with [typescript](#typescript) and [BabelPlugin](#babel-plugin)\n\n# Plugin API\n\nLet\'s take a look a plugin\'s interface first\n\n```typescript\ninterface Plugin {\n    test?: RegExp;\n    dependencies?: string[];\n    init: { (context: WorkFlowContext) };\n    transform: { (file: File) };\n    bundleStart?(context: WorkFlowContext);\n    bundleEnd?(context: WorkFlowContext);\n}\n```\n\n### test [RegExp]\n\nDefining `test` will filter files into your plugin. For example `\\.js$ `\n\n\n\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'f2331f5a416620089ba470db2be807b394066374',
21 silly publish   _id: 'fuse-box@1.2.91',
21 silly publish   _shasum: 'de1a4696647942f0ab88d307880cb669905a1095',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name fuse-box
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'fuse-box',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'fuse-box',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/fuse-box
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/nc/.npm/fuse-box/1.2.91/package.tgz
30 verbose request uri https://registry.npmjs.org/fuse-box
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 3:49:00 PM
33 verbose request id 0730865b35b7a8c4
34 http request PUT https://registry.npmjs.org/fuse-box
35 http 403 https://registry.npmjs.org/fuse-box
36 verbose headers { 'content-type': 'application/json',
36 verbose headers   'cache-control': 'max-age=300',
36 verbose headers   'content-length': '96',
36 verbose headers   'accept-ranges': 'bytes',
36 verbose headers   date: 'Tue, 13 Dec 2016 13:49:03 GMT',
36 verbose headers   via: '1.1 varnish',
36 verbose headers   connection: 'keep-alive',
36 verbose headers   'x-served-by': 'cache-bma7025-BMA',
36 verbose headers   'x-cache': 'MISS',
36 verbose headers   'x-cache-hits': '0',
36 verbose headers   'x-timer': 'S1481636941.111729,VS0,VE1907',
36 verbose headers   vary: 'Accept-Encoding' }
37 verbose request invalidating /Users/nc/.npm/registry.npmjs.org/fuse-box on PUT
38 error publish Failed PUT 403
39 verbose stack Error: "You cannot publish over the previously published version 1.2.91." : fuse-box
39 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
39 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
39 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
39 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:200:22)
39 verbose stack     at emitTwo (events.js:106:13)
39 verbose stack     at Request.emit (events.js:191:7)
39 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1067:10)
39 verbose stack     at emitOne (events.js:101:20)
39 verbose stack     at Request.emit (events.js:188:7)
39 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:988:12)
40 verbose statusCode 403
41 verbose pkgid fuse-box
42 verbose cwd /Users/nc/work/fuse-box/fuse-box
43 error Darwin 15.0.0
44 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
45 error node v6.9.1
46 error npm  v3.9.6
47 error code E403
48 error "You cannot publish over the previously published version 1.2.91." : fuse-box
49 error If you need help, you may report this error at:
49 error     <https://github.com/npm/npm/issues>
50 verbose exit [ 1, true ]
