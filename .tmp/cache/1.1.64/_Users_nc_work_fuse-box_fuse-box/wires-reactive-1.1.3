FuseBox.module("wires-reactive", function(___scope___){
___scope___.file("index.js", function(exports, require, module, __filename, __dirname){
"use strict";
var XPath_1 = require("./XPath");
exports.XPath = XPath_1.XPath;
var Eval_1 = require("./Eval");
exports.Eval = Eval_1.Eval;
var Watch_1 = require("./Watch");
exports.Watch = Watch_1.Watch;
var Utils_1 = require("./Utils");
exports.precompileString = Utils_1.precompileString;
exports.precompileExpression = Utils_1.precompileExpression;
exports.extractWatchables = Utils_1.extractWatchables;

});
___scope___.file("XPath.js", function(exports, require, module, __filename, __dirname){
"use strict";
var XPath = (function () {
    function XPath() {
    }
    XPath.dotNotation = function (path) {
        if (path instanceof Array) {
            return {
                path: path,
                str: path.join("."),
            };
        }
        if (typeof path !== "string") {
            return;
        }
        return {
            path: path.split("\."),
            str: path,
        };
    };
    XPath.hasProperty = function (obj, path) {
        if (path && path.length === 0 || obj === undefined) {
            return false;
        }
        var notation = this.dotNotation(path);
        if (!notation) {
            return false;
        }
        path = notation.path;
        var validNext = true;
        for (var i = 0; i < path.length; i++) {
            if (validNext && obj.hasOwnProperty(path[i])) {
                obj = obj[path[i]];
                if (obj === undefined) {
                    validNext = false;
                }
            }
            else {
                return false;
            }
        }
        return true;
    };
    XPath.get = function (obj, path) {
        if (path.length === 0 || obj === undefined) {
            return undefined;
        }
        var notation = this.dotNotation(path);
        if (!notation) {
            return;
        }
        path = notation.path;
        for (var i = 0; i < path.length; i++) {
            obj = obj[path[i]];
            if (obj === undefined) {
                return undefined;
            }
        }
        return obj;
    };
    XPath.set = function (obj, xpath, v) {
        var path = xpath.split("\.");
        if (path.length === 1) {
            obj[xpath] = v;
        }
        if (path.length >= 2) {
            var initialArray = obj[path[0]];
            var value = initialArray;
            if (value === undefined) {
                value = {};
                obj[path[0]] = value;
            }
            for (var i = 1; i < path.length; i++) {
                var x = path[i];
                if (i === path.length - 1) {
                    value[x] = v;
                }
                else {
                    if (value[x] === undefined) {
                        var nvalue = {};
                        value[x] = nvalue;
                        value = nvalue;
                    }
                    else {
                        value = value[x];
                    }
                }
            }
        }
    };
    return XPath;
}());
exports.XPath = XPath;

});
___scope___.file("Eval.js", function(exports, require, module, __filename, __dirname){
"use strict";
var XPath_1 = require("./XPath");
var wires_angular_expressions_1 = require("wires-angular-expressions");
var extract_vars_1 = require("extract-vars");
var exprCache = {};
var Eval = (function () {
    function Eval() {
    }
    Eval.assign = function (context, expression, value) {
        var cached = exprCache[expression];
        var variables = [];
        if (cached) {
            variables = cached;
        }
        else {
            variables = extract_vars_1.dig(expression);
            exprCache[expression] = variables;
        }
        var targetVariable = variables[0];
        if (targetVariable) {
            if (context.locals && XPath_1.XPath.get(context.locals, targetVariable) !== undefined) {
                XPath_1.XPath.set(context.locals, targetVariable, value);
            }
            else {
                XPath_1.XPath.set(context.scope, targetVariable, value);
            }
        }
    };
    Eval.expression = function (context, expression) {
        var model = wires_angular_expressions_1.Compile(expression);
        return model(context.scope, context.locals);
    };
    return Eval;
}());
exports.Eval = Eval;

});
___scope___.file("Watch.js", function(exports, require, module, __filename, __dirname){
"use strict";
var Eval_1 = require("./Eval");
var XPath_1 = require("./XPath");
var Utils_1 = require("./Utils");
var wires_angular_expressions_1 = require("wires-angular-expressions");
var async_watch_1 = require("async-watch");
var Watch = (function () {
    function Watch() {
    }
    Watch.evalTemplate = function (context, tpl) {
        if (typeof tpl === "string") {
            tpl = Utils_1.precompileString(tpl);
        }
        var str = [];
        for (var i = 0; i < tpl.length; i++) {
            var item = tpl[i];
            if (typeof item === "object") {
                var expression = item[0];
                var model = wires_angular_expressions_1.Compile(expression);
                str.push(model(context.scope, context.locals));
            }
            else {
                str.push(item);
            }
        }
        return str.join("");
    };
    Watch.expression = function (context, expression, fn) {
        if (typeof expression === "string") {
            expression = Utils_1.precompileExpression(expression);
        }
        var watchables = expression[1];
        var template = expression[0];
        fn(Eval_1.Eval.expression(context, template));
        if (watchables.length === 0) {
            return;
        }
        var watchers = [];
        var initial = true;
        for (var i = 0; i < watchables.length; i++) {
            var vpath = watchables[i];
            if (context.locals && XPath_1.XPath.hasProperty(context.locals, vpath)) {
                watchers.push(async_watch_1.AsyncWatch(context.locals, vpath, function () { return null; }));
            }
            else {
                watchers.push(async_watch_1.AsyncWatch(context.scope, vpath, function (value) { return null; }));
            }
        }
        return async_watch_1.AsyncSubscribe(watchers, function (ch) {
            if (initial === false) {
                fn(Eval_1.Eval.expression(context, template));
            }
            initial = false;
        });
    };
    Watch.template = function (context, tpl, fn) {
        var _this = this;
        if (typeof tpl === "string") {
            tpl = Utils_1.precompileString(tpl);
        }
        var precompiled = tpl;
        var watchables = [];
        for (var i = 0; i < precompiled.length; i++) {
            var item = precompiled[i];
            if (typeof item === "object") {
                var watchable = item[1];
                for (var w = 0; w < watchable.length; w++) {
                    var variable = watchable[w];
                    if (watchables.indexOf(variable) === -1) {
                        watchables.push(variable);
                    }
                }
            }
        }
        fn(this.evalTemplate(context, tpl));
        if (watchables.length === 0) {
            return;
        }
        var initial = true;
        var watchers = [];
        for (var i = 0; i < watchables.length; i++) {
            var vpath = watchables[i];
            if (context.locals && XPath_1.XPath.hasProperty(context.locals, vpath)) {
                watchers.push(async_watch_1.AsyncWatch(context.locals, vpath, function () { return null; }));
            }
            else {
                watchers.push(async_watch_1.AsyncWatch(context.scope, vpath, function (value) { return null; }));
            }
        }
        return async_watch_1.AsyncSubscribe(watchers, function (ch) {
            if (initial === false) {
                fn(_this.evalTemplate(context, tpl));
            }
            initial = false;
        });
    };
    return Watch;
}());
exports.Watch = Watch;

});
___scope___.file("Utils.js", function(exports, require, module, __filename, __dirname){
"use strict";
var extract_vars_1 = require("extract-vars");
exports.precompileString = function (str) {
    var re = /({{\s*[^}]+\s*}})/g;
    var list = str.split(re).map(function (x) {
        var expr = x.match(/{{\s*([^}]+)\s*}}/);
        if (expr) {
            var expressionString = expr[1].trim();
            return [expressionString, extract_vars_1.dig(expressionString)];
        }
        return x;
    });
    var filtered = [];
    for (var i = 0; i < list.length; i++) {
        if (list[i] !== undefined && list[i] !== "") {
            filtered.push(list[i]);
        }
    }
    return filtered;
};
exports.precompileExpression = function (str) {
    return [str, extract_vars_1.dig(str)];
};
exports.extractWatchables = function (str) {
    return extract_vars_1.dig(str);
};

});
return ___scope___.entry("index.js")
})